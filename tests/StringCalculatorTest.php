<?php

namespace TestWebinar;

use PHPUnit\Framework\TestCase;

class StringCalculatorTest extends TestCase
{
    private $instance;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->instance = new StringCalculator();
    }

    /**
     * @dataProvider additionProvider
     */
    public function testAdd(int $a, int $b, int $expected): void
    {
        $response = $this->instance->add("{$a},{$b}");
        $this->assertSame($expected, $response);
    }

    public function additionProvider(): array
    {
        return [
            [0, 0, 0],
            [0, 1, 1],
            [1, 0, 1],
            [1, 1, 2],
            [2, 1001, 2],
        ];
    }


    public function testAddWithNullParams()
    {
        $response = $this->instance->add('');

        $this->assertEquals(0, $response);
    }

    public function testNegativesException()
    {
        $this->expectExceptionMessage('Negatives not allowed: -1');
        $this->instance->add('-1,-2');
    }

    public function testAddOver1000()
    {
        $response = $this->instance->add('2,1001');
        $this->assertEquals(2, $response);
    }

    public function testChangeDelimiter()
    {
        $response = $this->instance->add(
            '//*
        1*2*3'
        );
        $this->assertEquals(6, $response);
    }

    public function testLengthDelimiter()
    {
        
    }

}
